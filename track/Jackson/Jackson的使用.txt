一、
    1、简单对象转换
        ObjectMapper mapper = new ObjectMapper();
        
        Person person = new Person();
        person.setName("Tom");
        person.setAge(40);

        String JSONString = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(person);
        Person deserializedPerson = mapper.readValue(JSONString, Person.class);

    2、ObjectMapper的配置
        //在反序列化时忽略在 JSON 中存在但 Java 对象不存在的属性
            mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES,false);
        //在序列化时日期格式默认为 yyyy-MM-dd'T'HH:mm:ss.SSSZ
            mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS,false)
        //在序列化时忽略值为 null 的属性
            mapper.setSerializationInclusion(Include.NON_NULL);
        //忽略值为默认值的属性
            mapper.setDefaultPropertyInclusion(Include.NON_DEFAULT);

        注意：
            更多配置信息可以查看 Jackson 的 DeserializationFeature，SerializationFeature 和 Include。

    3、注解的使用
        @JsonProperty	用于属性，把属性的名称序列化时转换为另外一个名称。示例： 
                @JsonProperty("birth_ d ate") 
                private Date birthDate;
        @JsonFormat	用于属性或者方法，把属性的格式序列化时转换成指定的格式。示例： 
                @JsonFormat(timezone = "GMT+8", pattern = "yyyy-MM-dd HH:mm") 
                public Date getBirthDate()
        @JsonPropertyOrder	用于类， 指定属性在序列化时 JSON 中的顺序 ， 示例： 
                @JsonPropertyOrder({ "birth_Date", "name" }) 
                public class Person
        @JsonCreator	用于构造方法，和 @JsonProperty 配合使用，适用有参数的构造方法。 示例： 
                @JsonCreator 
                public Person(@JsonProperty("name")String name) {…}
        @JsonAnySetter	用于属性或者方法，设置未反序列化的属性名和值作为键值存储到 map 中 
                @JsonAnySetter 
                public void set(String key, Object value) { 
                map.put(key, value); 
                }
        @JsonAnyGetter	用于方法 ，获取所有未序列化的属性 
                public Map<String, Object> any() { return map; }

二、序列化与反序列化
    1、List 泛 型使用示例
        CollectionType JavaType = mapper.getTypeFactory().constructCollectionType(List.class, Person.class);
        List<Person> personList = mapper.readValue(JSONInString, JavaType); 
        List<Person> personList = mapper.readValue(JSONInString, new TypeReference<List<Person>>(){});
    2、Map 泛型使用示例
        //第二参数是 map 的 key 的类型，第三参数是 map 的 value 的类型
        MapType JavaType = mapper.getTypeFactory().constructMapType(HashMap.class,String.class,Person.class);
        Map<String, Person> personMap = mapper.readValue(JSONInString,JavaType);
        Map<String, Person> personMap = mapper.readValue(JSONInString, new TypeReference<Map<String, Person>>() {});
    3、