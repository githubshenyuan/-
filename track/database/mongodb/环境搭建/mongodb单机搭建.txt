一、环境
二、下载与安装
    1、下载：
        地址：  https://www.mongodb.org/dl/linux/
    2、安装：
        将 mongodb-linux-x86_64-rhel70-3.2.1.tgz 解压到 /usr/local/mongodb
    3、配置
        在 ./bin 下新建 mongodb.conf 
        添加以下配置：
            # 数据存放目录
            dbpath = /usr/local/mongodb/mongodb-linux-x86_64-rhel70-3.2.1/db
            #日志文件存放目录
            logpath = /usr/local/mongodb/mongodb-linux-x86_64-rhel70-3.2.1/logs/mongodb.log
            #端口
            port = 27017
            #以守护线程的方式启用，即在后台运行
            fork = true
            #日志输出方式，使用追加的方式写日志
            logappend = true
            #PID File 的完整路径，如果没有设置，则没有PID文件
            pidfilepath = /usr/local/mongodb/mongodb-linux-x86_64-rhel70-3.2.1/mongo.pid
            #关闭http接口，默认关闭27018端口访问
            nohttpinterface = false
            #声明这是一个集群的分片，默认端口是27018
            #shardsvr = true
            #设置每个数据库将被保存在一个单独的目录
            #directoryperdb = true
            #开启认证
            auth = true
            #设开启简单的rest API，置后打开28017网页端口
            rest = true

        其他参数说明：
            bind_ip = 127.0.0.1    
                默认值是所有的IP地址都能访问，该参数指定MongoDB对外提供服务的绑定IP地址，用于监听客户端 Application的连接，客户端只能使用绑定的IP地址才能访问mongod，其他IP地址是无法访问的
            auth = true
                默认值是不需要验证，即 --noauth，该参数启用用户访问权限控制；当mongod 使用该参数启动时，MongoDB会验证客户端连接的账户和密码，以确定其是否有访问的权限。如果认证不通过，那么客户端不能访问MongoDB的数据库。
        4、服务启动
            ./bin/mongod -f mongodb.conf
        5、停止服务
            ./mongod --shutdown --dbpath=/usr/local/mongodb/mongodb-linux-x86_64-rhel70-3.2.1/db
三、防火墙设置
    firewall-cmd --zone=public --add-port=27017/tcp --permanent
    firewall-cmd --zone=public --add-port=28017/tcp --permanent
    firewall-cmd --reload
四、数据库操作
    1、用户操作：
        # 添加管理员
            # 切换到 admin 库 (admin 内置数据库)
                use admin
            # 添加超级用户
                db.createUser({user:"root",pwd:"root",roles:["root"]})
            # 添加 admin 管理用户
                db.createUser({user: "admin",pwd: "admin",roles: [{role: "userAdminAnyDatabase", db: "admin"}]})
            # 验证用户：
                db.auth('root','root')
            # 删除用户
                db.dropUser("用户名") 
                db.removeUser("用户名")         // 注意： 此方法新版本官方已经弃用
        # 添加普通用户
            # 切换到 db_user 库 (db_user 自定义普通数据库)
                use db_user
            # 创建用户，并附有 读写 db_user 库的角色
                db.createUser({user:"test_username",pwd:"test_password",roles:[{ role:"readWrite",db: "db_user" }]})
            # 验证用户：
                db.auth('test_username','test_password')
            # 删除用户
                db.dropUser("用户名") 
                db.removeUser("用户名")         // 注意： 此方法新版本官方已经弃用
        # 改变用户 角色
            # 给 test_username 用户 添加读写 test 库的 角色
                db.grantRolesToUser("test_username",[{ role: "readWrite", db: "test" } ])
            # 删除用户 test_username  的读写 test 库的 角色
                db.revokeRolesFromUser("channel",[{ role: "readWrite", db: "test" } ])
        # 查询用户
            # 查询数据库内所有操作
                db.getUsers()
            # 条件查询(按用户名查询)
                db.getUser("username")
        
    2、数据库操作：
        1)  数据库操作
            # 列出所有数据库
                show dbs
            # 创建数据库 db_user
                use db_user             // 如果数据库不存在，则创建数据库，否则切换到指定数据库。
            # 删除数据库
                 db.dropDatabase()
        2) 集合操作
            # 创建集合 {"name":"集合名称","options":"有关内存索引等的参数"}
                db.createCollection(name, options)
            # 列出所有集合
                show collections
            # 向集合中插入数据
                db.collection.insert({"id":"123","username1":"username","password1":"pass"})
            # 查询集合中所有的数据
                db.collection.find()
            # 条件查询
                db.collection.find({"_id":"123"})
            # 删除集合
                db.collection.drop()
            
         
1. 数据库用户角色：read、   readWrite;  
2. 数据库管理角色：dbAdmin、dbOwner、userAdmin；       
3. 集群管理角色：clusterAdmin、clusterManager、clusterMonitor、hostManager；
4. 备份恢复角色：backup、restore；
5. 所有数据库角色：readAnyDatabase、readWriteAnyDatabase、userAdminAnyDatabase、dbAdminAnyDatabase
6. 超级用户角色：root 


        