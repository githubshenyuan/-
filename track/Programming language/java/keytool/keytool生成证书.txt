1、生成证书
    keytool -genkey -alias "tomcat" -keyalg "RSA" -keystore "d:\mykeystore.keystore"  -dname "CN=localhost, OU=localhost, O=localhost, L=SH, ST=SH, C=CN" -keypass "123456" -storepass -validity 180
    详解：
        -genkey：  
        -alias：
        -keyalg：
        -keystore：
        -dname：








-genkey　　表示要创建一个新的密钥

-dname　　表示密钥的Distinguished Names，  表明了密钥的发行者身份

　　CN=commonName      注：生成证书时，CN要和服务器的域名相同，如果在本地测试，则使用localhost

　　OU=organizationUnit

　　O=organizationName

　　L=localityName

　　S=stateName

　　C=country

-keyalg　　　　使用加密的算法，这里是RSA

-alias　　　　　和keystore关联的别名，这个alias通常不区分大小写

-keypass　　    私有密钥的密码，这里设置为 123456

-keystore 　　  密钥保存在D:盘目录下的mykeystore文件中

-storepass 　　存取密码，这里设置为changeit，这个密码提供系统从mykeystore文件中将信息取出

-validity　　　　该密钥的有效期为 180天 (默认为90天)

下面是各选项的缺省值。 

-alias "mykey"
-keyalg "DSA"
-keysize 1024
-validity 90
-keystore 用户宿主目录中名为 .keystore 的文件
-file 读时为标准输入，写时为标准输出 

cacerts证书文件(The cacerts Certificates File)

该证书文件存在于java.home\jre\lib\security目录下，是Java系统的CA证书仓库 


2.导出证书，由客户端安装
keytool -export -alias tomcat -keystore d:\mykeystore -file d:\mycerts.cer -storepass 123456

3.客户端配置：为客户端的JVM导入密钥(将服务器下发的证书导入到JVM中)
keytool -import -trustcacerts -alias tomcat -keystore "%JAVA_HOME%/jre/lib/security/cacerts " -file d:\mycerts.cer -storepass 123456

生成的证书可以交付客户端用户使用，用以进行SSL通讯，或者伴随电子签名的jar包进行发布者的身份认证。

常出现的异常：“未找到可信任的证书”--主要原因为在客户端未将服务器下发的证书导入到JVM中，可以用

keytool -list -alias tomcat -keystore "$JAVA_HOME/jre/lib/security/cacerts" -storepass 123456

来查看证书是否真的导入到JVM中。

keytool生成根证书时出现如下错误：

keytool错误:java.io.IOException:keystore was tampered with,or password was incorrect

原因是在你的home目录下是否还有.keystore存在。如果存在那么把他删除掉，然后再执行或者删除"%JAVA_HOME%/jre/lib/security/cacerts 再执行

 

数字证书中keytool命令使用说明
-alias           证书别名 
-keystore     指定密钥库的名称（cacerts是jre中默认的证书库名字，也可以使用其它名字 ）
-storepass   指定密钥库的密码 
-keypass     指定别名条目的密码 
-list        　　显示密钥库中的证书信息 
-v           　　显示密钥库中的证书详细信息 
-export      　将别名指定的证书导出到文件 
-file        　　指定导出到文件的文件名 
-delete     　  删除密钥库中某条目 
-import      　 将已签名数字证书导入密钥库 
-keypasswd   修改密钥库中指定条目口令 
-dname          指定证书拥有者信息 
-keyalg           指定密钥的算法 
-validity          指定创建的证书有效期多少天 
-keysize         指定密钥长度 
 
 
示例说明： 
浏览证书库里面的证书信息，可以使用如下命令： 
keytool -list -v -alias tomcat -keystore cacerts -storepass 666666 
keytool -list  -rfc -keystore e:/yushan.keystore -storepass 123456
keytool -list -v -keystore privateKey.store
缺省情况下，-list 命令打印证书的 MD5 指纹。而如果指定了 -v 选项，将以可读格式打印证书，如果指定了 -rfc 选项，将以可打印的编码格式输出证书
 
要删除证书库里面的某个证书，可以使用如下命令： 
keytool -delete -alias tomcat -keystore cacerts -storepass 666666 
 
要导出证书库里面的某个证书，可以使用如下命令： 
keytool -export -keystore cacerts -storepass 666666 -alias tomcat -file F:\server.cer 
keytool -export -alias tomcat -keystore e:/server.jks -file e:/server.crt -rfc -storepass 123456
 
*备注： keystore.jks 也可以为 .keystore格式 ; server.crt也可以为 .cer格式
"-rfc" 表示以base64输出文件，否则以二进制输出。
 
要修改某个证书的密码（注意：有些数字认证没有私有密码，只有公匙，这种情况此命令无效） 
这个是交互式的，在输入命令后，会要求你输入密码 
keytool -keypasswd -alias tomcat -keystore cacerts 
这个不是交互式的，输入命令后直接更改 
Keytool -keypasswd -alias tomcat -keypass 888888 -new 123456 -storepass 666666 -keystore cacerts

修改别名：

keytool -changealias -keystore mykeystore.keystore -alias 当前别名 -destalias 新别名

 

主流数字证书都有哪些格式
一般来说，主流的Web服务软件，通常都基于OpenSSL和Java两种基础密码库。

Tomcat、Weblogic、JBoss等Web服务软件，一般使用Java提供的密码库。通过Keytool工具，生成Java Keystore（JKS）格式的证书文件。
Apache、Nginx等Web服务软件，一般使用OpenSSL工具提供的密码库，生成PEM、KEY、CRT等格式的证书文件。
IBM的Web服务产品，如Websphere、IBM Http Server（IHS）等，一般使用IBM产品自带的iKeyman工具，生成KDB格式的证书文件。
微软Windows Server中的Internet Information Services（IIS）服务，使用Windows自带的证书库生成PFX格式的证书文件。
如何判断证书文件是文本格式还是二进制格式
您可以使用以下方法简单区分带有后缀扩展名的证书文件：

*.DER或*.CER文件： 这样的证书文件是二进制格式，只含有证书信息，不包含私钥。
*.CRT文件： 这样的证书文件可以是二进制格式，也可以是文本格式，一般均为文本格式，功能与 *.DER及*.CER证书文件相同。
*.PEM文件： 这样的证书文件一般是文本格式，可以存放证书或私钥，或者两者都包含。 *.PEM 文件如果只包含私钥，一般用*.KEY文件代替。
*.PFX或*.P12文件： 这样的证书文件是二进制格式，同时包含证书和私钥，且一般有密码保护。
您也可以使用记事本直接打开证书文件。如果显示的是规则的数字字母，例如：

—–BEGIN CERTIFICATE—–
MIIE5zCCA8+gAwIBAgIQN+whYc2BgzAogau0dc3PtzANBgkqh......
—–END CERTIFICATE—–
那么，该证书文件是文本格式的。

如果存在——BEGIN CERTIFICATE——，则说明这是一个证书文件。
如果存在—–BEGIN RSA PRIVATE KEY—–，则说明这是一个私钥文件。
 

证书格式之间的转换如下图：